# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.persistence_profile_list_response import PersistenceProfileListResponse
from ..types.persistence_profile_view import PersistenceProfileView
from .raw_client import AsyncRawPersistenceClient, RawPersistenceClient


class PersistenceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPersistenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPersistenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPersistenceClient
        """
        return self._raw_client

    def list_persistence_profiles(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PersistenceProfileListResponse:
        """
        Get paginated list of persistence profiles.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileListResponse
            Successful Response

        Examples
        --------
        from browser_use import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.persistence.list_persistence_profiles()
        """
        _response = self._raw_client.list_persistence_profiles(
            page_size=page_size, page_number=page_number, request_options=request_options
        )
        return _response.data

    def create_persistence_profile(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PersistenceProfileView:
        """
        Persistence profiles allow you to preserve the state of the browser between tasks.

        They are most commonly used to allow users to preserve the log-in state in the agent between tasks.
        You'd normally create one persistence profile per user and then use it for all their tasks.

        You can create a new persistence profile by calling this endpoint.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileView
            Successful Response

        Examples
        --------
        from browser_use import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.persistence.create_persistence_profile()
        """
        _response = self._raw_client.create_persistence_profile(request_options=request_options)
        return _response.data

    def get_persistence_profile(
        self, persistence_profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PersistenceProfileView:
        """
        Get persistence profile details.

        Parameters
        ----------
        persistence_profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileView
            Successful Response

        Examples
        --------
        from browser_use import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.persistence.get_persistence_profile(
            persistence_profile_id="persistence_profile_id",
        )
        """
        _response = self._raw_client.get_persistence_profile(persistence_profile_id, request_options=request_options)
        return _response.data

    def delete_browser_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Permanently delete a browser profile and its configuration.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from browser_use import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.persistence.delete_browser_profile(
            profile_id="profile_id",
        )
        """
        _response = self._raw_client.delete_browser_profile(profile_id, request_options=request_options)
        return _response.data


class AsyncPersistenceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPersistenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPersistenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPersistenceClient
        """
        return self._raw_client

    async def list_persistence_profiles(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PersistenceProfileListResponse:
        """
        Get paginated list of persistence profiles.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.persistence.list_persistence_profiles()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_persistence_profiles(
            page_size=page_size, page_number=page_number, request_options=request_options
        )
        return _response.data

    async def create_persistence_profile(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PersistenceProfileView:
        """
        Persistence profiles allow you to preserve the state of the browser between tasks.

        They are most commonly used to allow users to preserve the log-in state in the agent between tasks.
        You'd normally create one persistence profile per user and then use it for all their tasks.

        You can create a new persistence profile by calling this endpoint.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.persistence.create_persistence_profile()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_persistence_profile(request_options=request_options)
        return _response.data

    async def get_persistence_profile(
        self, persistence_profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PersistenceProfileView:
        """
        Get persistence profile details.

        Parameters
        ----------
        persistence_profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PersistenceProfileView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.persistence.get_persistence_profile(
                persistence_profile_id="persistence_profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_persistence_profile(
            persistence_profile_id, request_options=request_options
        )
        return _response.data

    async def delete_browser_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Permanently delete a browser profile and its configuration.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from browser_use import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.persistence.delete_browser_profile(
                profile_id="profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_browser_profile(profile_id, request_options=request_options)
        return _response.data
