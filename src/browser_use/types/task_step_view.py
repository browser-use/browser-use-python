# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class TaskStepView(UncheckedBaseModel):
    """
    View model for representing a single step in a task's execution

    Attributes:
        number: Sequential step number within the task
        memory: Agent's memory at this step
        evaluation_previous_goal: Agent's evaluation of the previous goal completion
        next_goal: The goal for the next step
        url: Current URL the browser is on for this step
        screenshot_url: Optional URL to the screenshot taken at this step
        actions: List of stringified json actions performed by the agent in this step
    """

    number: int
    memory: str
    evaluation_previous_goal: typing_extensions.Annotated[str, FieldMetadata(alias="evaluationPreviousGoal")]
    next_goal: typing_extensions.Annotated[str, FieldMetadata(alias="nextGoal")]
    url: str
    screenshot_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="screenshotUrl")] = None
    actions: typing.List[str]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
