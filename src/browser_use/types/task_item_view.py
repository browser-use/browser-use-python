# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .task_status import TaskStatus


class TaskItemView(UncheckedBaseModel):
    """
    View model for representing a task with its execution details

    Attributes:
        id: Unique identifier for the task
        session_id: ID of the session this task belongs to
        llm: The LLM model used for this task represented as a string
        task: The task prompt/instruction given to the agent
        status: Current status of the task execution
        started_at: Naive UTC timestamp when the task was started
        finished_at: Naive UTC timestamp when the task completed (None if still running)
        metadata: Optional additional metadata associated with the task set by the user
        is_scheduled: Whether this task was created as a scheduled task
        steps: Optional list of execution steps
        output: Final output/result of the task
        user_uploaded_files: Optional list of files uploaded by user for this task
        output_files: Optional list of files generated as output by this task
        browser_use_version: Version of browser-use used for this task (older tasks may not have this set)
            is_success: Whether the task was successful (self-reported by the agent)
    """

    id: str
    session_id: typing_extensions.Annotated[str, FieldMetadata(alias="sessionId")]
    llm: str
    task: str
    status: TaskStatus
    started_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startedAt")]
    finished_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="finishedAt")] = None
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    is_scheduled: typing_extensions.Annotated[bool, FieldMetadata(alias="isScheduled")]
    output: typing.Optional[str] = None
    browser_use_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="browserUseVersion")] = (
        None
    )
    is_success: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isSuccess")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
