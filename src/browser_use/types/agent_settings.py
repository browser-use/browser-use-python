# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .supported_ll_ms import SupportedLlMs


class AgentSettings(UncheckedBaseModel):
    """
    Agent settings

    Attributes:
            llm: The LLM model to use for the agent
            highlight_elements: Whether to highlight elements during agent interaction with the browser
            max_agent_steps: Maximum number of steps the agent can take before stopping

            flash_mode: Whether flash mode is enabled
            thinking: Whether thinking mode is enabled
            vision: Whether vision capabilities are enabled
            custom_system_prompt_extension: Optional custom system prompt for the agent
    """

    llm: typing.Optional[SupportedLlMs] = None
    highlight_elements: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="highlightElements")] = (
        None
    )
    flash_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="flashMode")] = None
    thinking: typing.Optional[bool] = None
    vision: typing.Optional[bool] = None
    max_steps: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxSteps")] = None
    system_prompt_extension: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="systemPromptExtension")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
