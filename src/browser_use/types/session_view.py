# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .session_status import SessionStatus
from .task_item_view import TaskItemView


class SessionView(UncheckedBaseModel):
    """
    View model for representing a (browser) session with its associated tasks.

    Attributes:
        id: Unique identifier for the session.
        status: Current status of the session (active/stopped).
        live_url: URL where the browser can be viewed live in real-time.
        started_at: Timestamp when the session was created and started.
        finished_at: Timestamp when the session was stopped (None if still active).
        tasks: Optional list of tasks associated with this session.
            record_url: URL to access the recorded session playback.
        public_share_url: Optional URL to access the public share of the session.
    """

    id: str
    status: SessionStatus
    live_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="liveUrl")] = None
    started_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startedAt")]
    finished_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="finishedAt")] = None
    tasks: typing.Optional[typing.List[TaskItemView]] = None
    record_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="recordUrl")] = None
    public_share_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="publicShareUrl")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
